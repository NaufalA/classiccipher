package classic

import "fmt"

// Vigenere contains the supplied key and effective vigenere key.
type Vigenere struct {
	key  string // user provided key
	vKey []byte // effective converted key
}

// NewVigenere creates new Vigenere struct with vigenere key generated by key.
func NewVigenere(key string) (*Vigenere, error) {
	vKey, err := upperOnly(key)
	if err != nil {
		return nil, fmt.Errorf("effective key length is less than 1")
	}
	return &Vigenere{key, vKey}, nil
}

// VKey gets the effective vigenere key.
func (v *Vigenere) VKey() string {
	return string(v.vKey)
}

// Encrypt encrypts plaintext pt with vigenere key.
func (v *Vigenere) Encrypt(pt string) (string, error) {
	bs, _ := upperOnly(pt)
	ct := make([]byte, len(bs))
	for i, c := range bs {
		ct[i] = 'A' + (c-'A'+v.vKey[i%len(v.vKey)]-'A')%26
	}
	return string(ct), nil
}

// Decrypt decrypts ciphertext ct with vigenere key.
func (v *Vigenere) Decrypt(ct string) (string, error) {
	bs, _ := upperOnly(ct)
	pt := make([]byte, len(bs))
	for i := range bs {
		c := ct[i]
		pt[i] = 'A' + (c-v.vKey[i%len(v.vKey)]+26)%26
	}
	return string(pt), nil
}
